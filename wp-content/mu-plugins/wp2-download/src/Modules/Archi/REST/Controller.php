<?php

/**
 * Summary of namespace WP2\Download\Modules\Archi\REST
 */

namespace WP2\Download\Modules\Archi\REST;

use WP2\Download\Modules\Archi\Registry;
use WP2\Download\Modules\Archi\Viz\Mermaid\Generator;
use WP_Error;
use WP_REST_Controller;
use WP_REST_Request;
use WP_REST_Response;

/**
 * REST controller for Archi graph API.
 *
 * @component_id archi_rest_controller
 * @namespace archi.rest
 * @type Controller
 * @note "REST controller for Archi graph API."
 * @facet {"name": "boot", "visibility": "public", "returnType": "void"}
 * @facet {"name": "register_routes", "visibility": "public", "returnType": "void"}
 * @facet {"name": "get_graph", "visibility": "public", "returnType": "WP_REST_Response|WP_Error"}
 * @relation {"to": "registry", "type": "dependency", "label": "reads components"}
 * @relation {"to": "mermaid_generator", "type": "dependency", "label": "renders diagram"}
 */
final class Controller extends WP_REST_Controller
{
    protected $namespace = 'wp2/archi/v1';
    protected $rest_base = 'graph';

    public function boot(): void
    {
        add_action('rest_api_init', [$this, 'register_routes']);
    }

    public function register_routes(): void
    {
        register_rest_route(
            $this->namespace,
            '/' . $this->rest_base,
            [
                [
                    'methods' => 'GET',
                    'callback' => [$this, 'get_graph'],
                    'permission_callback' => [$this, 'permissions_check'],
                    'args' => [
                        'facet' => [
                            'type' => 'string',
                            'required' => false,
                            'description' => 'Filter components by a specific facet.',
                        ],
                        'format' => [
                            'type' => 'string',
                            'required' => false,
                            'enum' => ['json', 'mermaid'],
                            'default' => 'json',
                        ],
                        'compact' => [
                            'type' => 'boolean',
                            'required' => false,
                            'description' => 'For Mermaid format, generate a compact diagram.',
                        ],
                    ],
                ],
            ]
        );
    }

    public function permissions_check(): bool
    {
        return current_user_can('manage_options');
    }

    public function get_graph(WP_REST_Request $request): WP_REST_Response|WP_Error
    {
        $facet = (string) $request->get_param('facet');
        $format = (string) $request->get_param('format');
        $compact = (bool) $request->get_param('compact');

        $all_components = Registry::instance()->all();

        if ($facet !== '') {
            $all_components = array_filter(
                $all_components,
                static fn ($c) => in_array($facet, $c['facets'], true)
            );
        }

        if ($format === 'mermaid') {
            $opts = [
                'compact' => $compact,
                'notes' => ['WP2 Architecture API'],
                'comments' => ['Generated by wp2-archi REST API'],
                'class_defs' => [
                    'Service' => ['fill:#add8e6', 'stroke:#000'],
                    'Manager' => ['fill:#90ee90', 'stroke:#000'],
                    'Database' => ['fill:#ffe4b5', 'stroke:#000'],
                ],
            ];
            $mermaid = Generator::from_components($all_components, $opts);
            return new WP_REST_Response(
                [
                    'format' => 'mermaid',
                    'diagram' => $mermaid,
                ],
                200
            );
        }

        $nodes = [];
        $edges = [];
        foreach ($all_components as $id => $c) {
            $nodes[] = [
                'id' => $id,
                'type' => $c['type'],
                'title' => $c['title'],
                'description' => $c['description'],
                'facets' => $c['facets'],
            ];
            foreach ($c['relations'] as $r) {
                if (isset($all_components[$r['to']])) {
                    $edges[] = [
                        'from' => $id,
                        'to' => $r['to'],
                        'type' => $r['type'],
                        'label' => $r['label'],
                        'weight' => $r['weight'],
                    ];
                }
            }
        }

        return new WP_REST_Response(
            [
                'format' => 'json',
                'nodes' => $nodes,
                'edges' => $edges,
            ],
            200
        );
    }
}
